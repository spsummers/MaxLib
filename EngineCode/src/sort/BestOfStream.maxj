package sort;

import java.util.ArrayList;
import java.util.List;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

public class BestOfStream extends KernelLib {

	public enum Mode{
		MAX, MIN;
	}

	List<DFEVar> best;
	int n;

	public BestOfStream(Kernel k, Mode m, int n, DFEVar comparison){
		super(k);
		this.n = n;

		List<DFEVar> comparison_offs = new ArrayList<DFEVar>();
		for(int i = 0; i < n; i++){
			DFEVar comparisonMetadata = i == 0 ? comparison : k.stream.offset(comparison, -i);
			comparison_offs.add(comparisonMetadata);
		}

		List<DFEVar> reduced = new ArrayList<DFEVar>();

		for(int i = 0; i < n; i++){
			DFEVar best;
			DFEVar enable;
			DFEVar reset = k.constant.var(false);
			if(i == 0){
				enable = k.constant.var(true);
			}else{
				switch(m){
				case MAX: enable = reduced.get(i-1) === comparison_offs.get(i-1); break;
				case MIN: enable = reduced.get(i-1) === comparison_offs.get(i-1); break;
				default: enable = k.constant.var(true); break;
				}
			}
			switch(m){
			case MAX: best = Reductions.streamMax(comparison, reset, enable);	break;
			case MIN: best = Reductions.streamMin(comparison, reset, enable);	break;
			default: best = Reductions.streamMax(comparison, reset, enable);	break;
			}
			reduced.add(best);
		}
		this.best = reduced;
	}



	public DFEVar best(int i){
		return best.get(i);
	}

	public List<DFEVar> best(){
		return best;
	}
}
