package division;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.Optimization;
import com.maxeler.maxcompiler.v2.kernelcompiler.op_management.MathOps;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.FloatingPoint;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFloat;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

public class Divider extends KernelLib{

	private boolean signed = true;
	private static int maxBRAMs = 2;
	private static int maxDSPs = 2;
	private static int m20kBits = 20480;
	private static int ramb18Bits = 18432;

	public Divider(Kernel owner){
		super(owner);
	}

	public static DFEVar reciprocal(DFEVar x){
		if(x.getType() instanceof DFEFloat){
			return reducedLUTDivideFloat(x, 10, 25);
		}else if(x.getType() instanceof DFEFix){
			return reducedLUTDivide(x, 11, 35, x.getType().getTotalBits() + 16);
		}else{
			throw new IllegalArgumentException("Only float and fixed point types are supported.");
		}
	}

	public static DFEVar divInt18_1BRAM_1DSP(DFEVar x){
		return reducedLUTDivide(x, 11, 7, 25, 25);
	}

	public static DFEVar divInt18_1BRAM_2DSP(DFEVar x){
		return reducedLUTDivide(x, 11, 7, 35, 35);
	}

	public static DFEVar reducedLUTDivide(DFEVar x, int nHighBits, int nLowBits, int nInvBits, int nOutputBits){
		return reducedLUTDivideIgnore(x, nHighBits, nLowBits, nInvBits, nOutputBits, 0);
	}
		/*Kernel k = x.getKernel();
		k.optimization.pushEnableBitGrowth(true);
		int nInBits = x.getType().getTotalBits();
		DFEVar positive = x > 0;
		DFEVar absx = KernelMath.abs(x.cast(dfeRawBits(nInBits)).cast(dfeInt(nInBits))).cast(dfeUInt(nInBits));

		if(nLowBits + nHighBits != absx.getType().getTotalBits())
			System.err.println("Incompatible numbers of bits");
		DFEVar leading1 = Bitops.onehotDecode(Bitops.leading1Detect(absx));
		DFEVar nShift = (nInBits - 1 - leading1).cast(dfeUInt(leading1.getType().getTotalBits()));

		DFEVar xShifted = absx.shiftLeft(nShift);
		DFEVar xL = xShifted.slice(0, nLowBits).cast(dfeUInt(nLowBits));
		DFEVar xH = (xShifted.slice(nLowBits, nHighBits) # k.constant.var(dfeRawBits(nLowBits), 0)).cast(dfeUInt(nInBits));
		DFEVar xH0 = xShifted.slice(nLowBits, nHighBits - 1);
		// xH > xL so truncate with no underflow to maintain precision
		k.optimization.pushFixOpMode(Optimization.bitSizeExact(nInBits), Optimization.offsetExact(1), MathOps.SUB);
		DFEVar xDiff = xH - xL;
		k.optimization.popFixOpMode(MathOps.SUB);

		double maxVal = 1/Math.pow(Math.pow(2, nInBits-1), 2);
		DFEType txInv = dfeFixMax(nInvBits, maxVal, SignMode.TWOSCOMPLEMENT);
		int nLUTBits = (int) Math.pow(2, xH0.getType().getTotalBits());
		Memory<DFEVar> xHInvLUT = k.mem.alloc(txInv, nLUTBits);
		DFEVar xInvSq = xHInvLUT.read(xH0);

		k.optimization.pushFixOpMode(Optimization.bitSizeExact(nOutputBits), Optimization.offsetNoOverflow(), MathOps.MUL);
		DFEVar xInv = xDiff * xInvSq;
		k.optimization.popFixOpMode(MathOps.MUL);
		DFEVar xInvBiggerContainer = k.constant.var(dfeRawBits(nInBits), 0) # xInv;
		DFEVar xInvShift = xInvBiggerContainer.shiftLeft(nShift + 2);
		DFEVar xInvShiftTrunc = xInvShift.slice(nInBits, nOutputBits).cast(fixedpointReciprocalReturnType(x, nOutputBits, 0));
		k.optimization.popEnableBitGrowth();

		double xInvVals[] = new double[nLUTBits];
		for(int n = 0; n < nLUTBits; n++){
			double xVal = (n + Math.pow(2, nHighBits - 1)) * Math.pow(2, nLowBits);
			xInvVals[n] = 1 / (xVal * xVal);
		}
		xHInvLUT.setContents(xInvVals);

		k.optimization.pushEnableBitGrowth(false);
		xInvShiftTrunc = positive ? xInvShiftTrunc : - xInvShiftTrunc;
		k.optimization.popEnableBitGrowth();
		return xInvShiftTrunc;
	}*/

	public static DFEVar reducedLUTDivide(DFEVar x, int nLUTAddrBits, int nLUTDataBits, int nOutputBits){
		return reducedLUTDivideIgnore(x, nLUTAddrBits + 1, x.getType().getTotalBits() - nLUTAddrBits - 1, nLUTDataBits, nOutputBits, 0);
	}

	public static DFEVar reducedLUTDivideIgnore(DFEVar x, int nHighBits, int nLowBits, int nInvBits, int nOutputBits, int ignoreBits){

		Kernel k = x.getKernel();
		k.optimization.pushEnableBitGrowth(true);
		int nInBits = x.getType().getTotalBits();
		DFEVar positive = x > 0;
		DFEVar absx = KernelMath.abs(x.cast(dfeRawBits(nInBits)).cast(dfeInt(nInBits))).cast(dfeUInt(nInBits));

		if(nLowBits + nHighBits != absx.getType().getTotalBits())
			throw new IllegalArgumentException("Number of low and high bits must sum to input type width");

		// Find position of leading 1 then shift so no leading 0s
		DFEVar leading1 = Bitops.onehotDecode(Bitops.leading1Detect(absx.slice(ignoreBits, nInBits-ignoreBits).cast(dfeUInt(nInBits-ignoreBits))));
		DFEVar nShift = (nInBits - ignoreBits - 1 - leading1).cast(dfeUInt(leading1.getType().getTotalBits()));
		DFEVar xShifted = absx.shiftLeft(nShift);

		// Slice the low and high parts
		DFEVar xL = xShifted.slice(0, nLowBits).cast(dfeUInt(nLowBits));
		DFEVar xH = (xShifted.slice(nLowBits, nHighBits) # k.constant.var(dfeRawBits(nLowBits), 0)).cast(dfeUInt(nInBits));
		DFEVar xH0 = xShifted.slice(nLowBits, nHighBits - 1); // the MSB 1 is taken as implicit for the LUT, so slice away MSB
		// xH > xL so truncate with no underflow to maintain precision
		DFEVar xDiff = xH - xL;

		double maxVal = 1/Math.pow(Math.pow(2, nInBits-1), 2);
		DFEType txInvSq = dfeFixMax(nInvBits, maxVal, SignMode.TWOSCOMPLEMENT);
		System.out.println("tXInvSq = " + txInvSq);
		int nLUTBits = (int) Math.pow(2, xH0.getType().getTotalBits());
		Memory<DFEVar> xHInvLUT = k.mem.alloc(txInvSq, nLUTBits);
		DFEVar xInvSq = xHInvLUT.read(xH0);
		k.optimization.pushFixOpMode(Optimization.bitSizeExact(nOutputBits), Optimization.offsetNoOverflow(), MathOps.MUL);
		DFEVar xInv = xDiff * xInvSq;
		k.optimization.popFixOpMode(MathOps.MUL);
		int maxShift = nInBits - ignoreBits - 1;
		DFEVar rShift = (maxShift - nShift).cast(dfeUInt(leading1.getType().getTotalBits()));

		DFEVar xInvShift = xInv.shiftRight(rShift);
		k.optimization.popEnableBitGrowth();

		double xInvVals[] = new double[nLUTBits];
		for(int n = 0; n < nLUTBits; n++){
			double xVal = (n + Math.pow(2, nHighBits - 1)) * Math.pow(2, nLowBits);
			xInvVals[n] = 1 / (xVal * xVal);
		}
		xHInvLUT.setContents(xInvVals);

		k.optimization.pushEnableBitGrowth(false);
		xInvShift = positive ? xInvShift : - xInvShift;
		k.optimization.popEnableBitGrowth();
		//xInvShift = xInvShift.cast(fixedpointReciprocalReturnType(x, nOutputBits, ignoreBits));
		xInvShift = xInvShift.cast(dfeRawBits(nOutputBits)).cast(fixedpointReciprocalReturnType(x, nOutputBits, ignoreBits));

		return xInvShift;
	}

	/**
	 * Experimental: cast fixed to float and used floating point reciprocal
	 * @param x
	 * @param nLUTAddrBits
	 * @param nLUTDataBits
	 * @return
	 */
	public static DFEVar reducedLUTDivideFixedViaFloat(DFEVar x, int nLUTAddrBits, int nLUTDataBits){
		//int expBits = 8;//MathUtils.bitsToAddress(x.getType().getTotalBits());
		DFEType tDenom = DFETypeFactory.dfeFloat(8, 24);
		DFEVar xFloat = x.cast(tDenom);
		DFEVar xFloatInv = reducedLUTDivideFloat(xFloat, nLUTAddrBits, nLUTDataBits);
		DFEType tInv = fixedpointReciprocalReturnType(x, x.getType().getTotalBits(), 0);
		DFEVar xInv = xFloatInv.cast(tInv);

		xFloat.simWatch("xFloat");
		xFloatInv.simWatch("xFloatInv");
		xInv.simWatch("xFixedInv");

		return xInv;
	}

	/**
	 * Reduced LUT division for floating point DFEVars
	 * Similar to fixed point implementation
	 * but skips pre & post shift due to floating point renormalisation
	 * @param x The number to invert
	 * @return 1/x
	 */
	public static DFEVar reducedLUTDivideFloat(DFEVar x, int nLUTAddrBits, int nLUTDataBits){
		Kernel k = x.getKernel();

		DFEFloat xType = (DFEFloat) x.getType();
		int nLowBits = xType.getMantissaBits() - nLUTAddrBits - 1; // -1 since getMantissaBits() includes the implicit 1

		//DFEVar xMan = FloatingPoint.getMantissa(x);
		DFEVar xMan = FloatingPoint.getMantissaBits(x);
		DFEVar xExp = FloatingPoint.getExponentBits(x).cast(dfeUInt(xType.getExponentBits()));
		DFEVar xSign = FloatingPoint.getSignBit(x);

		DFEVar xL = xMan.slice(0, nLowBits).cast(dfeUInt(nLowBits));
		DFEVar xH = (k.constant.var(dfeRawBits(1), 1) # xMan.slice(nLowBits, nLUTAddrBits) # k.constant.var(dfeRawBits(nLowBits), 0)).cast(dfeUInt(xType.getMantissaBits()));
		DFEVar xH0 = xMan.slice(nLowBits, nLUTAddrBits); // LUT accounts for implicit 1

		k.optimization.pushEnableBitGrowth(true);
		DFEVar xDiff = xH - xL;
		k.optimization.popEnableBitGrowth();

		// Fill the look up table with 1 / xH^2 values, assuming the implicit 1 at MSB
		double maxVal = 1/Math.pow(Math.pow(2, xType.getMantissaBits() - 1), 2); // = 1/min(xH)^2
		//DFEType txInvSq = dfeFixMax(xType.getMantissaBits() + 1, maxVal, SignMode.TWOSCOMPLEMENT);
		DFEType txInvSq = dfeFixMax(nLUTDataBits, maxVal, SignMode.TWOSCOMPLEMENT);

		int nLUTVals = (int) Math.pow(2, xH0.getType().getTotalBits());

		Memory<DFEVar> xHInvLUT = k.mem.alloc(txInvSq, nLUTVals);
		double xInvVals[] = new double[nLUTVals];
		for(int n = 0; n < nLUTVals; n++){
			double xVal = (n + Math.pow(2, nLUTAddrBits)) * Math.pow(2, nLowBits);
			xInvVals[n] = 1 / (xVal * xVal);
		}
		xHInvLUT.setContents(xInvVals);

		DFEVar xInvSq = xHInvLUT.read(xH0);
		k.optimization.pushEnableBitGrowth(true);
		// Because we left xDiff, xInvSq as twos complement, but they are really unsigned
		// we have some leading 0s to remove to retain best precision
		k.optimization.pushFixOpMode(Optimization.bitSizeExact(xType.getMantissaBits() + 3), Optimization.offsetNoOverflow(), MathOps.MUL);
		DFEVar xInv = xDiff * xInvSq;
		k.optimization.popFixOpMode(MathOps.MUL);
		k.optimization.popEnableBitGrowth();

		int xInvBits = xInv.getType().getTotalBits();
		DFEVar xInvCast = xInv.cast(dfeRawBits(xInvBits)).slice(xInvBits - xType.getMantissaBits() - 2, xType.getMantissaBits());

		// Set the new exponent
		// N.B. here we manipulate the biased exponent
		k.optimization.pushFixOpMode(Optimization.bitSizeExact(xType.getExponentBits()), Optimization.offsetExact(0), MathOps.SUB);
		DFEVar newXExp = (2 * xType.getExponentBias() - 1) - xExp;
		// If mantissa == 1 (i.e. x is power of 2) we must add 1 back to exponent
		newXExp = (xMan === 1)? newXExp + 1 : newXExp;
 		k.optimization.popFixOpMode(MathOps.SUB);

		// Pack the sign, exponent and mantissa, slicing away the implicit MSB = 1
		DFEVar result = (xSign # newXExp # xInvCast.slice(0, xType.getMantissaBits() - 1)).cast(xType);
		return result;
	}

	public void setSigned(boolean signed){
		this.signed = signed;
	}

	private static boolean isSigned(DFEVar x){
		DFEFix t = (DFEFix) x.getType();
		return t.getSignMode() == SignMode.TWOSCOMPLEMENT;
	}

	private static DFEType fixedpointReciprocalReturnType(DFEVar x, int nOutputBits, int nIgnoreBits){
		if(x.getType() instanceof DFEFix){
			DFEFix t = (DFEFix) x.getType();
			int nIntBits = t.getFractionBits() - nIgnoreBits + 2;
			int nFracBits = nOutputBits - nIntBits;
			return DFETypeFactory.dfeFix(nIntBits, nFracBits, SignMode.TWOSCOMPLEMENT);
		}else{
			throw new IllegalArgumentException("Method for fixed point types only");
		}
	}
}
