package matrix;

import java.util.ArrayList;
import java.util.List;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelObject;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType.StructFieldType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

/**
 * Class for handling symmetric matrices
 * Can reduce IO/memory needs for symmetric matrices
 * @author sioni
 *
 */
public class SymMatrix<T> extends KernelLib{

	private final int D;
	private final int nUnique;
	private List<T> data;

	public SymMatrix(Kernel owner, int D){
		super(owner);
		this.D = D;
		int nUnique = 0;
		for(int i = 0; i < D; i++){
			nUnique += (i + 1);
		}
		this.nUnique = nUnique;
	}

	public SymMatrix(Kernel owner, List<T> data){
		super(owner);
		this.nUnique = data.size();
		int D = this.nUnique;
		int i = 1;
		while((D - i) > 0){
			D -= i;
			i++;
		}
		this.D = D;
		this.data = data;
	}

	public SymMatrix(Matrix m){
		super(m.data(0, 0).getKernel());
		this.D = m.nCols();
		int nUnique = 0;
		for(int i = 0; i < D; i++){
			nUnique += (i + 1);
		}
		this.nUnique = nUnique;
		this.data = new ArrayList<T>();
		for(int i = 0; i < D; i++){
			for(int j = 0; j < D; j++){
				if(j >= i){
					this.data.add((T) m.data(i, j));
				}
			}
		}
	}

	/**
	 * Get a DxD Matrix containing the symmetric data
	 * @return
	 */
	public Matrix matrix(){
		DFEVar[][] m = new DFEVar[D][D];
		int n = 0;
		for(int i = 0; i < D; i++){
			for(int j = 0; j < D; j++){
				if(j >= i){
					m[i][j] = (DFEVar) data.get(n);
					m[j][i] = (DFEVar) data.get(n);
					n++;
				}
			}
		}
		return new Matrix(m);
	}

	/**
	 * Get the 1D data
	 * @return
	 */
	public List<T> data(){
		return data;
	}

	/**
	 * Return the 1D data, either as a:
	 * DFEVector (if all data has the same type), or
	 * DFEStruct (otherwise)
	 * @return
	 */
	public KernelObject dataVector(){
	//public DFEVector<DFEVar> dataVector(){
		if(!oneType())
			throw new IllegalArgumentException("Not all the data have the same type, so cannot make a DFEVector");
		KernelObject v;
		if(oneType()){
			v = ioType(((DFEVar)data.get(0)).getType(), D).newInstance(getKernel());
			for(int i = 0; i < nUnique; i++)
				((DFEVector<DFEVar>)v).get(i) <== (DFEVar) data.get(i);
		}else{
			List<DFEType> tList = new ArrayList<DFEType>();
			for(T item : data)
				tList.add(((DFEVar) item).getType());
			SymMatrix<DFEType> dummy = new SymMatrix<DFEType>(getKernel(), tList);
			v = ioType(dummy).newInstance(getKernel());
			for(int i = 0; i < nUnique; i++)
				((DFEStruct) v)[""+i] <== (DFEVar) data.get(i);
		}
		return v;
	}

	/**
	 * The DFEVectorType to input the necessary number of unique elements
	 * n.b. all elements must be the same type
	 * @param T
	 * @return
	 */
	public static DFEVectorType<DFEVar> ioType(DFEType T, int D){
		int nUnique = 0;
		for(int i = 0; i < D; i++){
			nUnique += (i + 1);
		}
		DFEVectorType<DFEVar> tSymMatrix = new DFEVectorType<DFEVar>(T, nUnique);
		return tSymMatrix;
	}

	/**
	 * The DFEStructType to input the necessary number of unique elements
	 * with input types given by the SymMatrix<DFEType> T
	 * @param T
	 * @return
	 */
	public static DFEStructType ioType(SymMatrix<DFEType> T){
		StructFieldType[] sfts = new StructFieldType [T.nUnique];
		for(int i = 0; i < T.nUnique; i++){
			sfts[i] = new StructFieldType("" + i, T.data[i]);
		}
		DFEStructType tSymMatrix = new DFEStructType(sfts);
		return tSymMatrix;
	}

	public boolean oneType(){
		// Check all data has the same type
		DFEType t = ((DFEVar) data.get(0)).getType();
		boolean sameType = true;
		for(T item : data){
			sameType = ((DFEVar) item).getType() == t;
		}
		return sameType;
	}
}
