package matrix;

import maxpower.kernel.KernelBinaryOp.Add;
import maxpower.utils.TreeReduce;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelObject;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType.StructFieldType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

public class Vector extends Matrix{

	public enum Shape{
		ROW, COL;
	}

	private Shape shape = Shape.COL;

	private DFEVar normSquared = null;
	private DFEVar norm = null;
	private DFEVar normReciprocal = null;

	public Vector(Vector other){
		super(other.data(0, 0).getKernel());
		this.data(other.data);
		this.shape = other.shape;
	}
	public Vector(DFEVector<DFEVar> data){
		super(data.get(0).getKernel());
		DFEVar[][] matData = new DFEVar[data.getSize()][1];
		for(int i = 0; i < data.getSize(); i++)
			matData[i][0] = data.get(i);
		this.data(matData);
	}

	public Vector(DFEVar[] data){
		super(data[0].getKernel());
		DFEVar[][] matData = new DFEVar[data.length][1];
		for(int i = 0; i < data.length; i++)
			matData[i][0] = data[i];
		this.data(matData);
	}

	public Vector(DFEVar[][] data){
		super(data[0][0].getKernel());
		if(data.length != 1 && data[0].length != 1){
			System.err.println("Vector: Trying to construct a Vector from 2D array data with 2 non-unity axes");
			this.data(null);
		}else{
			if(data.length == 1){
				shape = Shape.ROW;
			}else if(data[0].length == 1){
				shape = Shape.COL;
			}
			this.data(data);
		}
	}

	public Vector(Kernel owner){
		super(owner);
	}

	public DFEVar data(int i){
		return this.data()[i][0];
	}

	public Shape shape(){ return shape; }

	public void shape(Shape shape){
		if(shape != this.shape){
			DFEVar[][] newData = new DFEVar[this.nCols()][this.nRows()];
			for(int i = 0; i < nCols(); i++)
				for(int j = 0; j < nRows(); j++)
					newData[i][j] = this.data(j, i);
			this.data = newData;
			this.shape = shape;
		}
	}

	public Vector add(Vector rhs){
		return new Vector(((LinAlg) this).add(rhs).data);

	}

	public Vector sub(Vector rhs){
		return new Vector(((LinAlg) this).sub(rhs).data);
	}

	public DFEVar normSquared(){
		if(this.normSquared == null){
			DFEVar[] squares = new DFEVar[this.length()];
			for(int i = 0; i < data.length; i++){
				squares[i] = this.data(i) * this.data(i);
			}
			this.normSquared = TreeReduce.reduce(new Add<DFEVar>(), squares);
		}
		return this.normSquared;
	}

	public DFEVar norm(DFEType normType){
		if(this.norm == null){
			this.norm = KernelMath.sqrt(this.normSquared(), normType);
		}
		return this.norm;
	}

	public DFEVar normReciprocal(DFEType normType){
		if(this.normReciprocal == null){
			this.normReciprocal = inverter.invert(this.norm(normType));
		}
		return this.normReciprocal;
	}

	public Vector unit(DFEType normType){
		DFEVar[] unitVector = new DFEVar[this.length()];
		for(int i = 0; i < data.length; i++){
			unitVector[i] = this.data(i) * this.normReciprocal(normType);
		}
		return new Vector(unitVector);

	}

	public KernelObject packForIO(){
		KernelObject packed;
		Vector v = new Vector(this.data);
		v.shape(Shape.COL);
		if(sameType()){
			DFEVectorType<DFEVar> tPacked = new DFEVectorType<DFEVar>(data(0, 0).getType(), v.nRows());
			packed = tPacked.newInstance(getKernel());
			for(int i = 0; i < v.nRows(); i++)
				((DFEVector<DFEVar>) packed).get(i) <== v.data(i, 0);
		}else{
			StructFieldType[] sfts = new StructFieldType[v.nRows()];
			for(int i = 0; i < v.nRows(); i++)
				sfts[i] = new StructFieldType(""+i, v.data(i, 0).getType());
			DFEStructType tPacked = new DFEStructType(sfts);
			packed = tPacked.newInstance(getKernel());
			for(int i = 0; i < v.nRows(); i++)
				((DFEStruct) packed).get(""+i) <== v.data(i, 0);
		}
		return packed;
	}

	private boolean sameType(){
		boolean same = true;
		Vector v = new Vector(this);
		v.shape(Shape.COL);
		DFEType T = v.data(0, 0).getType();
		for(int i = 0; i < v.nRows(); i++)
			same = v.data(i, 0).getType().equals(T) && same;
		return same;
	}

	public int length(){
		return Math.max(data.length, data[0].length);
	}

	public static DFEVar dot(Vector a, Vector b){
		DFEVar[] products = new DFEVar[a.length()];
		for(int i = 0; i < a.length(); i++){
			products[i] = a.data(i) * b.data(i);
		}
		return TreeReduce.reduce(new Add<DFEVar>(), products);
	}

	public static Vector cross(Vector a, Vector b){
		if(a.length() != 3 || b.length() != 3)
			System.err.println("Only implemented cross product for length 3 vectors");
		DFEVar[] determinants = new DFEVar[3];
		for(int i = 0; i < 3; i++){
			DFEVar[][] thisDeterminant = new DFEVar[2][2];
			int iL = i == 0 ? 2 : 1;
			int iR = i == 2 ? 2 : 3;
			thisDeterminant[0][0] = a.data(iL);
			thisDeterminant[0][1] = a.data(iR);
			thisDeterminant[1][0] = b.data(iL);
			thisDeterminant[1][1] = b.data(iR);
			determinants[i] = new Matrix(thisDeterminant).determinant();
		}
		return new Vector(determinants);
	}

	public Vector elementwiseMul(Vector b){
		if(this.length() != b.length()){
			System.err.println("Lengths must be equal");
		}
		DFEVar[] result = new DFEVar[this.length()];
		for(int i = 0; i < this.length(); i++){
			result[i] = this.data(i) * b.data(i);
		}
		return new Vector(result);
	}

	/**
	 * Get a subvector from a vector from indices low to high (inclusive)
	 * @param low: the lower index
	 * @param high: the upper undex
	 * @return
	 */
	public Vector subVec(int low, int high){
		DFEVar[] subVec = new DFEVar[high - low + 1];
		for(int i = 0; i <= high - low; i++)
			subVec[i] = this.data(low+i);
		return new Vector(subVec);
	}

}
