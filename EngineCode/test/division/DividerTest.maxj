package division;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.junit.Test;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;
import com.maxeler.maxcompiler.v2.utils.Bits;

import division.Divider;

public class DividerTest {

	private static class FixedPointReciprocalKernel extends Kernel{
		
		public FixedPointReciprocalKernel(KernelParameters params, DFEType t, int nIgnoreBits){
			super(params);
			DFEVar x = io.input("x", t);
			DFEVar y;
			if(nIgnoreBits > 0){
				y = Divider.reducedLUTDivide(x, 10, t.getTotalBits() - 10, t.getTotalBits(), t.getTotalBits());
			}else{
				y = Divider.reducedLUTDivideIgnore(x, 10, t.getTotalBits() - 10, t.getTotalBits(), t.getTotalBits(), ignoreBits);
			}
			io.output("y", y, y.getType());
			System.out.println(y.getType());
		}
	}
	
	private static class KFReciprocalKernel extends Kernel{
		private final static int nIntBits = 17;
		private final static int nFracBits = 7;
		private final static int nInvIntBits = 3;
		private final static int nInvFracBits = 32;
		private final static DFEType T = dfeFix(nIntBits, nFracBits, SignMode.TWOSCOMPLEMENT);
		private final static DFEType tInv = dfeFix(nInvIntBits, nInvFracBits, SignMode.TWOSCOMPLEMENT);
		public KFReciprocalKernel(KernelParameters params){
			super(params);
			DFEVar x = io.inut("x", tInv);
			DFEVar y = Divider.reducedLUTDivideIgnore(x, 11, 13, 35, 35, 6);
			io.output("y", y, y.getType());
			System.out.println(y.getType());
		}
	}

	private static class ReciprocalKernel extends Kernel{

		public static DFEType t = dfeFloat(, 24);
		public ReciprocalKernel(KernelParameters params, int nLUTBits){
			super(params);

			DFEVar x = io.input("x", t);
			DFEVar y = Divider.reducedLUTDivideFloat(x, nLUTBits);
			io.output("y", y, y.getType());
		}
	}

	private static final int numRandom = 100;

	//@Test public void testFixP_8_8(){ testFixedP(8, 8); }
	//@Test public void testFixP_16_16(){ testFixedP(16, 16); }
	//@Test public void testFixP_1_24(){ testFixedP(1, 24); }
	//@Test public void testFixP_17_7(){ testFixedP(17, 7); }
	@Test public void testKF(){ testKFReciprocal(); }
	
	public void testKFReciprocal(){
		DFEType T = KFReciprocalKernel.T;
		SimulationManager m = new SimulationManager("KFReciprocal");
		KFReciprocalKernel kernel = new KFReciprocalKernel(m.makeKernelParameters(), T);
		m.setKernel(kernel);
		m.build();
		double max = ((DFEFix)t).getMax();
		double tol = max * Math.pow(2.0, -14);
		runTest(m, t, tol);
	}
	
	public void testFixedP(int nIntBits, int nFracBits){
		DFEType t = DFETypeFactory.dfeFix(nIntBits, nFracBits, SignMode.TWOSCOMPLEMENT);
		SimulationManager m = new SimulationManager("Reciprocal_master");
		FixedPointReciprocalKernel kernel = new FixedPointReciprocalKernel(m.makeKernelParameters(), t);
		m.setKernel(kernel);
		m.build();
		double max = ((DFEFix)t).getMax();
		double tol = max * Math.pow(2.0, -14);
		runTest(m, t, tol);
	}

	//@Test public void test9() { testFloatP(9);  }
	//@Test public void test10(){ testFloatP(10); }
	//@Test public void test11(){ testFloatP(11); }

	public void testFloatP(int nLUTBits){
		SimulationManager m = new SimulationManager("Reciprocal_master");
		ReciprocalKernel kernel = new ReciprocalKernel(m.makeKernelParameters(), nLUTBits);
		m.setKernel(kernel);
		m.build();
		double tol;
		switch(nLUTBits){
			case 9:
				tol = Math.pow(2.0, -19);
			case 10:
				tol = Math.pow(2.0, -20);
			case 11:
				tol = Math.pow(2.0, -21);
			default:
				tol = Math.pow(2.0, -21);
		}
		runTest(m, kernel.t, tol);
	}

	public void runTest(SimulationManager m, DFEType t, double tol) {

		long seed = System.currentTimeMillis();
		Random rng = new Random(seed);
		m.logMsg("Using random seed: %d", seed);
		int totalCycles = numRandom;
		List<Bits> input = new ArrayList<Bits>();

		List<Double> scalarExpected = new ArrayList<Double>(totalCycles);

		double max = 2.;
		double min = 1.;
		if(t instanceof DFEFix){
			max = ((DFEFix) t).getMax();
			if(((DFEFix) t).getSignMode() == SignMode.TWOSCOMPLEMENT)
				min = -max;
			else
				min = 0;
		}
		for (int i = 0; i < numRandom; i++) {
			Double value = min + rng.nextDouble() * (max - min);
			input.add(t.encodeConstant(value));
			scalarExpected.add(1.0/value);
		}

	    m.setInputDataRaw("x", input);
		m.setKernelCycles(numRandom);
		m.run();

		for (int i = 0; i < totalCycles; i++) {
			assertEquals(scalarExpected[i], m.getOutputData("y")[i], tol);
		}
	}
}
